version: '3.9'

services:
  backend:
    build:
      context: ../backend
      dockerfile: ../backend/Dockerfile
      target: prod
    image: backend:${BACKEND_VERSION:-latest}
    restart: always
    env_file:
    - ../backend/.env
    depends_on:
      db:
        condition: service_healthy
    environment:
      BACKEND_HOST: 0.0.0.0
      BACKEND_DB_HOST: backend-db
      BACKEND_DB_PORT: 5432
      BACKEND_DB_USER: backend
      BACKEND_DB_PASS: backend
      BACKEND_DB_BASE: backend
    healthcheck: 
      test: curl --include --request GET http://localhost:8000/api/health || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    hostname: backend
    ports:
      # Exposes application port.
    - "8000:8000"
  db:
    image: postgres:13.8-bullseye
    hostname: backend-db
    environment:
      POSTGRES_PASSWORD: "backend"
      POSTGRES_USER: "backend"
      POSTGRES_DB: "backend"
    volumes:
    - backend-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U backend
      interval: 2s
      timeout: 3s
      retries: 40

  frontend:
    image: frontend:${BACKEND_VERSION:-latest}
    build:
      context: ../frontend
      dockerfile: ../frontend/Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000
    depends_on:
      backend:
        condition: service_healthy
    hostname: frontend

volumes:
  backend-db-data:
    name: backend-db-data
